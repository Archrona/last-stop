{
    "name": "typescript",
    "extensions": ["ts"],
    "tokens": [
        {
            "type": "white",
            "pattern": "[ \\t]+"
        },
        {
            "type": "newline",
            "pattern": "\\r|\\n|\\r\\n" 
        },
        {
            "type": "accent_keyword",
            "pattern": "(?:interface|case|default|do|finally|extends|export|import|declare|class|enum|try|catch|if|else|for|while|switch)(?=[^a-zA-Z0-9])"
        },
        {
            "type": "keyword",
            "pattern": "(?:break|case|catch|const|continue|default|do|else|false|finally|for|if|new|null|return|switch|this|throw|true|try|void|while|async|await|class|constructor|delete|export|extends|in|of|function|import|as|from|instanceof|let|super|undefined|var|yield|abstract|declare|enum|implements|interface|readonly|protected|private|public|static|type|any|never|object|number|bigint|symbol|string|boolean)(?=[^a-zA-Z0-9])"
        },
        {
            "type": "type_identifier",
            "pattern": "[A-Z][a-zA-Z0-9_]*"
        },            
        {
            "type": "identifier",
            "pattern": "[a-z_][a-zA-Z0-9_]*" 
        },
        {
            "type": "regular_expression",
            "pattern": "\\/(?!\\*)(?:[^\\[/\\\\]|\\\\.|\\[[^\\]]*\\])*\\/"
        },
        {
            "type": "number",
            "pattern": "([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+)"
        },
        {
            "type": "punctuation",
            "pattern": "\\+=|-=|\\*=|\\/=|\\%=|\\*\\*|\\*\\*=|<<=|>>=|>>>=|&=|\\|=|\\?\\.|\\/\\/|\\/\\*|\\+\\+|--|>=|<=|===|!==|==|!=|&&|\\|\\||<<|>>>|>>|[!\"#$%&'*+,-./:;<=>?@\\^_`|~]"
        },
        {
            "type": "grouping",
            "pattern": "[(){}\\[\\]]"
        }
    ],
    "commands": [
        "universal",
        "numbers",
        "eol_semi",
        "eq_triple",
        "grouping_usual",
        "op_usual",
        "struct_semi",
        "struct_js",
        "struct_ts",
        "comment_semi",
        "idioms_jest"
    ],
    "contextChanges": [
        {
            "token": "\"",
            "action": "push",
            "target": "double_quoted_string",
            "style": "string_delimiter"
        },
        {
            "token": "'",
            "action": "push",
            "target": "single_quoted_string",
            "style": "string_delimiter"
        },
        {
            "token": "`",
            "action": "push",
            "target": "back_quoted_string_js",
            "style": "string_delimiter"
        },
        {
            "token": "//",
            "action": "push",
            "target": "comment_single_line",
            "style": "comment"
        },
        {
            "token": "/*",
            "action": "push",
            "target": "comment_multiple_line",
            "style": "comment"
        },
        {
            "token": "}",
            "action": "pop",
            "requiresParent": "back_quoted_string_js",
            "style": "string_escape"
        }
    ],
    "rawInput": false,
    "defaultCasing": "camel",
    "indentation": [
        {
            "what": "dedent on close group",
            "current": "^\\s*[}\\])]",
            "rule": "unindent"
        },
        {
            "what": "indent when statement clearly not terminated",
            "previous": "[(\\[{~!@#$%^&*-+=|\\\\:<./?]\\s*$",
            "rule": "indent"
        }
    ],
    "triggerAutomaticIndentation": [ "}" ],
    "spacing": [
        {
            "what": "adjacent whitespace, period, or glue",
            "either": "\\.| |\\t|\\$g|\\$n|\\$u|\\$d",
            "rule": false
        },
        {
            "what": "start of line",
            "before": "^",
            "rule": false
        },
        {
            "what": "end of line",
            "after": "$",
            "rule": false
        },
        {
            "what": "open < of generic, left",
            "before": "[A-Z][A-Za-z0-9_$]*",
            "after": "<",
            "rule": false
        },
        {
            "what": "open < of generic, right",
            "before": "<",
            "after": "(?:[A-Z][A-Za-z0-9_$]*)|any|number|string|object|boolean|\\[|enum|void|never|undefined",
            "rule": false
        },
        {
            "what": "close > of generic, left",
            "before": "(?:[A-Z][A-Za-z0-9_$]*)|any|number|string|object|boolean|\\[|enum|void|never|undefined",
            "after": ">",
            "rule": false
        },
        {
            "what": "before closing punctuation",
            "after": "[)\\]};:},]|\\+\\+|--",
            "rule": false
        },
        {
            "what": "after opening punctuation",
            "before": "[(\\[{$#@~\\\\!]",
            "rule": false
        },
        {
            "what": "before index or call",
            "before": "[a-zA-Z0-9_\\)\\]\\.](?<!const|new|null|return|throw|await|delete|export|in|of|import|as|instanceof|let|var|yield|abstract|declare|readonly|protected|private|public|static|type)",
            "after": "\\(|\\[",
            "rule": false
        },
        {
            "what": "negative numbers",
            "before": "(?:^|[~!@#$%^&*([{:'\"<,.\\/?+\\-|=])\\s*-",
            "after": "[0-9a-zA-Z_]",
            "rule": false
        },
        {
            "what": "default fallthrough",
            "rule": true
        }
    ]
}