STORE
DataType {Number|String|Boolean|Null|List|Map}
PathComponent Path Transform
StoreNode { .parent con(par) detach detachWithoutJson getJson getType
  verifyNodeLinkage get{number|string|boolean|null} index(i) length key(k)
  keys ::fromJson } {Number|String|Boolean|Null|List|Map}Node
Store { .root .age .undoStack .checkpoint con(json) wasModified vfyNdLkg()
  getNavigator getSpecialNav<T>(constr T, path) followPath(p) undo(times)
  undoUntilCheckpoint() setCheckpoint() getUndoCount() }
Navigator { .store .age .node .path con(store, age, path = [])
  obsolete clone checkValid has{Parent|Index|Key} get{Json|Type|Number|String
  |Boolean|Null|Length|Keys|Path|Age|Store|UndoCount} map{List|Keys}
  go{Root|Parent|Index(i)|Key(k)|SiblingKey(k)|Sibling(o)|Next/PreviousSibling}
  set{Checkpoint|Number(n)|String(s)|Boolean(b)|Index(i,j)}
  insertItems(i,j[]) removeItems(from,to) push(j) pop() setKey(k,j) clearKey(k)

MODEL
Anchor {.position.{x,y} .fixed}
DocumentsNavigator { add(name,ctx,fn) get(name) }
DocumentNavigator { get{Text|Range(p1,p2)|Line(i)|Lines|BaseContext|Anchor(nm)
  |AnchorNames()|Cursor(ai)|Mark(ai)|View(ai)|LineCount()} 
  set{Line(i,t)|Text(t)|Anchor(n,a)|AnchorPosition(n,pos)}
  set{Cursor|Mark|View}(ai,pos)
  newAnchor(name,a) insertAt(t,pos) insert(ai,t) removeAt(p1,p2) remove(ai,t)
}
Model { .store .documents .subscriptions .views .project }


